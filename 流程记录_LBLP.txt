xCompressCU 开始处理一个 CTU 32x32
    xCheckRDCostIntra
        estIntraPredQT 编码亮度 PU 1 个
            35 个模式 循环试
                xRecurIntraCodingQT 按给定模式编码亮度
                    xIntraCodingLumaBlk 做预测 算残差 重建
                    xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                某个模式 RD 更小就更新 BestMode xSetIntraResultQT
                ==================================================
                修改 xRecurIntraCodingQT 记录编码当前 CU 中每个 4x4 块所用的 bits 和 公共部分的 bits
                xRecurIntraCodingQTnp 累加新方法下特定部分的 bits (new partition 即 L 形分块) (重复 4 种 L 分块)
                    公共部分 + 特定 L 覆盖的 4x4 块 
                某个模式 RD 更小就更新 BestMode xSetIntraResultQTnp
                ==================================================
        ----------------------------------------
        estIntraPredQTLP 整个块环状编码一次 记录 cost
        estIntraPredQTLP 1011 1101 1110 部分环状编码一次 记录 cost
        ----------------------------------------
        estIntraPredChromaQT 处理色差
            5 个模式 循环试
                xRecurIntraChromaCodingQT 按给定模式编码色差
                    xIntraCodingChromaBlk 做预测 算残差 U 重建
                    xIntraCodingChromaBlk 做预测 算残差 V 重建
                    xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQT
                ==================================================
                修改 xGetIntraBitsQT 记录编码当前 CU 中每个 4x4 块所用的 bits 和 公共部分的 bits
                xRecurIntraChromaCodingQTnp 累加新方法下特定部分的 bits (new partition 即 L 形分块) (重复 4 种 L 分块)
                    公共部分 + 特定 L 覆盖的 4x4 块 
                某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQTnp
                ==================================================
        ==================================================
        (针对 4 种 L 分块模式)
        利用 RD 过程中插入记录的数据 计算 32x32 层 L 分块模式的总代价
        ==================================================
        ----------------------------------------
        estIntraPredChromaQTLP 整个块环状编码一次 记录 cost
        estIntraPredChromaQTLP 1011 1101 1110 部分环状编码一次 记录 cost
        ----------------------------------------
        ----------------------------------------
        比较块状总 cost 和 环状总 cost 选更小的更新 rpcTempCU 存放的数据
        比较 1011 1101 1110 部分块状和环状总 cost 选小的更新存放数据
        ----------------------------------------
        encode 标志模式系数等
        getTotalBits calcRdCost 计算 32x32 层总代价
        xCheckBestMode 在向下分割时必定更新最佳模式
    加上分块标志(0)重新计算总代价
    ==================================================
    替换为不加分块标志 丢到 xCheckBestMode 里面统一处理
    # (针对 4 种 L 分块模式)
    # 加上分块标志(1+L mark)重新计算总代价
    ==================================================

    for uiPartUnitIdx=1:4
        xCompressCU 开始处理一个 16x16
            xCheckRDCostIntra
                estIntraPredQT 编码亮度 PU 1 个
                    35 个模式 循环试
                        xRecurIntraCodingQT 按给定模式编码亮度
                            xIntraCodingLumaBlk 做预测 算残差 重建
                            xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                        某个模式 RD 更小就更新 BestMode xSetIntraResultQT
                        ==================================================
                        修改 xRecurIntraCodingQT 记录编码当前 CU 中每个 4x4 块所用的 bits 和 公共部分的 bits
                        xRecurIntraCodingQTnp 累加新方法下特定部分的 bits (new partition 即 L 形分块) (重复 4 种 L 分块)
                            公共部分 + 特定 L 覆盖的 4x4 块 
                        某个模式 RD 更小就更新 BestMode xSetIntraResultQTnp
                        ==================================================
                ----------------------------------------
                estIntraPredQTLP 整个块环状编码一次 记录 cost
                estIntraPredQTLP 1011 1101 1110 部分环状编码一次 记录 cost
                ----------------------------------------
                estIntraPredChromaQT 处理色差
                    5 个模式 循环试
                        xRecurIntraChromaCodingQT 按给定模式编码色差
                            xIntraCodingChromaBlk 做预测 算残差 U 重建
                            xIntraCodingChromaBlk 做预测 算残差 V 重建
                            xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                        某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQT
                        ==================================================
                        修改 xGetIntraBitsQT 记录编码当前 CU 中每个 4x4 块所用的 bits 和 公共部分的 bits
                        xRecurIntraChromaCodingQTnp 累加新方法下特定部分的 bits (new partition 即 L 形分块) (重复 4 种 L 分块)
                            公共部分 + 特定 L 覆盖的 4x4 块 
                        某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQTnp
                        ==================================================
                ==================================================
                (针对 4 种 L 分块模式)
                利用 RD 过程中插入记录的数据 计算 16x16 层 L 分块模式的总代价
                ==================================================
                ----------------------------------------
                estIntraPredChromaQTLP 整个块环状编码一次 记录 cost
                estIntraPredChromaQTLP 1011 1101 1110 部分环状编码一次 记录 cost
                ----------------------------------------
                ----------------------------------------
                比较块状总 cost 和 环状总 cost 选更小的更新 rpcTempCU 存放的数据
                比较 1011 1101 1110 部分块状和环状总 cost 选小的更新存放数据
                ----------------------------------------
                encode 标志模式系数等
                getTotalBits calcRdCost 计算 16x16 层总代价
                xCheckBestMode 在向下分割时必定更新最佳模式
            加上分块标志(0)重新计算总代价
            ==================================================
            替换为不加分块标志 丢到 xCheckBestMode 里面统一处理
            # (针对 4 种 L 分块模式)
            # 加上分块标志(1+L mark)重新计算总代价
            ==================================================

            for uiPartUnitIdx=1:4
                xCompressCU 开始处理一个 8x8    
                    xCheckRDCostIntra
                        estIntraPredQT 编码亮度 PU 1 个
                            35 个模式 循环试
                                xRecurIntraCodingQT 按给定模式编码亮度
                                    xIntraCodingLumaBlk 做预测 算残差 重建
                                    xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                                某个模式 RD 更小就更新 BestMode xSetIntraResultQT
                                ==================================================
                                修改 xRecurIntraCodingQT 记录编码当前 CU 中每个 4x4 块所用的 bits 和 公共部分的 bits
                                xRecurIntraCodingQTnp 累加新方法下特定部分的 bits (new partition 即 L 形分块) (重复 4 种 L 分块)
                                    公共部分 + 特定 L 覆盖的 4x4 块 
                                某个模式 RD 更小就更新 BestMode xSetIntraResultQTnp
                                ==================================================
                        ----------------------------------------
                        estIntraPredQTLP 整个块环状编码一次 记录 cost
                        estIntraPredQTLP 1011 1101 1110 部分环状编码一次 记录 cost
                        ----------------------------------------
                        estIntraPredChromaQT 处理色差
                            5 个模式 循环试
                                xRecurIntraChromaCodingQT 按给定模式编码色差
                                    xIntraCodingChromaBlk 做预测 算残差 U 重建
                                    xIntraCodingChromaBlk 做预测 算残差 V 重建
                                    xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                                某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQT
                                ==================================================
                                修改 xGetIntraBitsQT 记录编码当前 CU 中每个 4x4 块所用的 bits 和 公共部分的 bits
                                xRecurIntraChromaCodingQTnp 累加新方法下特定部分的 bits (new partition 即 L 形分块) (重复 4 种 L 分块)
                                    公共部分 + 特定 L 覆盖的 4x4 块 
                                某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQTnp
                                ==================================================
                        ==================================================
                        (针对 4 种 L 分块模式)
                        利用 RD 过程中插入记录的数据 计算 8x8 层 L 分块模式的总代价
                        ==================================================
                        ----------------------------------------
                        estIntraPredChromaQTLP 整个块环状编码一次 记录 cost
                        ----------------------------------------
                        ----------------------------------------
                        比较块状总 cost 和 环状总 cost 选更小的更新 rpcTempCU 存放的数据
                        比较 1011 1101 1110 部分块状和环状总 cost 选小的更新存放数据
                        ----------------------------------------
                        encode 标志模式系数等
                        getTotalBits calcRdCost 计算 8x8 层总代价
                        xCheckBestMode 在向下分割时必定更新最佳模式

                    xCheckRDCostIntra 8x8 层内部分下去处理 4x4
                        estIntraPredQT 编码亮度 PU 4 个 for 1:4
                            35 个模式 循环试
                                xRecurIntraCodingQT 按给定模式编码亮度
                                    xIntraCodingLumaBlk 做预测 算残差 重建
                                    xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                                某个模式 RD 更小就更新 BestMode xSetIntraResultQT
                            ==================================================
                            记录 8x8 层 L 分块的 1/4 部分 Cost (这一层只需要记录亮度)
                            ==================================================
                        ----------------------------------------
                        estIntraPredQTLP 整个块环状编码一次 记录 cost
                        若 1/4 部分 cost 更小 更新
                        ----------------------------------------
                        estIntraPredChromaQT 处理色差 (1次)
                            5 个模式 循环试
                                xRecurIntraChromaCodingQT 按给定模式编码色差
                                    xIntraCodingChromaBlk 做预测 算残差 U 重建
                                    xIntraCodingChromaBlk 做预测 算残差 V 重建
                                    xGetIntraBitsQT calcRdCost 编码残差 计算 RD
                                某个模式 RD 更小就更新 BestMode xSetIntraResultChromaQT
                        ----------------------------------------
                        estIntraPredChromaQTLP 整个块环状编码一次 记录 cost
                        ----------------------------------------
                        ----------------------------------------
                        比较块状总 cost 和 环状总 cost 选更小的更新 rpcTempCU 存放的数据
                        ----------------------------------------
                        encode 标志模式系数等
                        getTotalBits calcRdCost 计算 4 个 4x4 层总代价
                        xCheckBestMode 选择分还是不分 更新 BestCU 比较对象是 8x8 CU
                        ==================================================
                        替换为 xCheckBestMode 比较 5 个选择项 选择分不分 更新 BestCU 比较对象是 8x8 CU + 4 个 4x4 CU + 3 个 L 形 8x8 CU. 注意加上新分块标志代价
                        ==================================================
                    //这一次碰上 codeSplitFlag 实际上没有进行编码 重新计算也没增加总代价
                    ==================================================
                    替换为不加分块标志 丢到 xCheckBestMode 里面统一处理
                    # 如果不是选择的 8x8 CU 必须得编码 (靠 NxN 确定分了 4x4, 靠新加的标志确定切块模式) 重新计算总代价
                    ==================================================
                累加 4 个划分的代价 rpcTempCU->copyPartFrom
                ==================================================
                记录 16x16 层 L 分块的 1/4 部分 Cost
                ==================================================
            加上分块标志(1)重新计算总代价
            ========================================
            替换为不加分块标志 丢到 xCheckBestMode 里面统一处理
            # 替换为加上分块标志(1+L Mark)重新计算总代价
            ========================================
            xCheckBestMode 选择分还是不分 更新 BestCU 比较对象是 16x16 CU
            ==================================================
            替换为 xCheckBestMode 比较 5 个选择项 选择分不分 更新 BestCU 比较对象是 16x16 CU + 4 个 8x8 CU + 3 个 L 形 16x16 CU. 注意加上新分块标志代价
            ==================================================
        累加 4 个划分的代价 rpcTempCU->copyPartFrom
        ==================================================
        记录 32x32 层 L 分块的 1/4 部分 Cost
        ==================================================
    加上分块标志(1)重新计算总代价
    ========================================
    替换为不加分块标志 丢到 xCheckBestMode 里面统一处理
    # 替换为加上分块标志(1+L Mark)重新计算总代价
    ========================================
    xCheckBestMode 选择分还是不分 更新 BestCU 比较对象是 32x32 CU
    ==================================================
    替换为 xCheckBestMode 比较 5 个选择项 选择分不分 更新 BestCU 比较对象是 32x32 CU + 4 个 16x16 CU + 3 个 L 形 32x32 CU. 注意加上新分块标志代价
    ==================================================

每处理完一个 CTU, 整体做一次当前 CU 的 encodeCU, 目的是保持熵编码器的状态连续

循环完所有的 CU

File writing
encodeSlice
encodeCU
